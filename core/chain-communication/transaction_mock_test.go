// Copyright 2019, Keychain Foundation Ltd.
// This file is part of the dipperin-core library.
//
// The dipperin-core library is free software: you can redistribute
// it and/or modify it under the terms of the GNU Lesser General Public License
// as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// The dipperin-core library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dipperin/dipperin-core/core/model (interfaces: AbstractTransaction)

// Package chain_communication is a generated GoMock package.
package chain_communication

import (
	ecdsa "crypto/ecdsa"
	common "github.com/dipperin/dipperin-core/common"
	model "github.com/dipperin/dipperin-core/core/model"
	model2 "github.com/dipperin/dipperin-core/core/vm/model"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"

)

// MockAbstractTransaction is a mock of AbstractTransaction interface
type MockAbstractTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractTransactionMockRecorder
}

func (m *MockAbstractTransaction) GetGasPrice() *big.Int {
	panic("implement me")
}

func (m *MockAbstractTransaction) AsMessage() (model.Message, error) {
	panic("implement me")
}

func (m *MockAbstractTransaction) PaddingReceipt(parameters model.ReceiptPara) (*model2.Receipt, error) {
	panic("implement me")
}

func (m *MockAbstractTransaction) GetGasLimit() uint64 {
	panic("implement me")
}

func (m *MockAbstractTransaction) GetReceipt() (*model2.Receipt, error) {
	panic("implement me")
}

func (m *MockAbstractTransaction) PaddingTxIndex(index int) {
	panic("implement me")
}

func (m *MockAbstractTransaction) GetTxIndex() (int, error) {
	panic("implement me")
}

// MockAbstractTransactionMockRecorder is the mock recorder for MockAbstractTransaction
type MockAbstractTransactionMockRecorder struct {
	mock *MockAbstractTransaction
}

// NewMockAbstractTransaction creates a new mock instance
func NewMockAbstractTransaction(ctrl *gomock.Controller) *MockAbstractTransaction {
	mock := &MockAbstractTransaction{ctrl: ctrl}
	mock.recorder = &MockAbstractTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAbstractTransaction) EXPECT() *MockAbstractTransactionMockRecorder {
	return m.recorder
}

// Amount mocks base method
func (m *MockAbstractTransaction) Amount() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Amount")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// Amount indicates an expected call of Amount
func (mr *MockAbstractTransactionMockRecorder) Amount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Amount", reflect.TypeOf((*MockAbstractTransaction)(nil).Amount))
}

// CalTxId mocks base method
func (m *MockAbstractTransaction) CalTxId() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalTxId")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// CalTxId indicates an expected call of CalTxId
func (mr *MockAbstractTransactionMockRecorder) CalTxId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalTxId", reflect.TypeOf((*MockAbstractTransaction)(nil).CalTxId))
}

// Cost mocks base method
func (m *MockAbstractTransaction) Cost() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cost")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// Cost indicates an expected call of Cost
func (mr *MockAbstractTransactionMockRecorder) Cost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cost", reflect.TypeOf((*MockAbstractTransaction)(nil).Cost))
}

// EncodeRlpToBytes mocks base method
func (m *MockAbstractTransaction) EncodeRlpToBytes() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeRlpToBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeRlpToBytes indicates an expected call of EncodeRlpToBytes
func (mr *MockAbstractTransactionMockRecorder) EncodeRlpToBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeRlpToBytes", reflect.TypeOf((*MockAbstractTransaction)(nil).EncodeRlpToBytes))
}

// EstimateFee mocks base method
func (m *MockAbstractTransaction) EstimateFee() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateFee")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// EstimateFee indicates an expected call of EstimateFee
func (mr *MockAbstractTransactionMockRecorder) EstimateFee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateFee", reflect.TypeOf((*MockAbstractTransaction)(nil).EstimateFee))
}

// ExtraData mocks base method
func (m *MockAbstractTransaction) ExtraData() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtraData")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// ExtraData indicates an expected call of ExtraData
func (mr *MockAbstractTransactionMockRecorder) ExtraData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtraData", reflect.TypeOf((*MockAbstractTransaction)(nil).ExtraData))
}

// Fee mocks base method
func (m *MockAbstractTransaction) Fee() *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fee")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// Fee indicates an expected call of Fee
func (mr *MockAbstractTransactionMockRecorder) Fee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fee", reflect.TypeOf((*MockAbstractTransaction)(nil).Fee))
}

// GetSigner mocks base method
func (m *MockAbstractTransaction) GetSigner() model.Signer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSigner")
	ret0, _ := ret[0].(model.Signer)
	return ret0
}

// GetSigner indicates an expected call of GetSigner
func (mr *MockAbstractTransactionMockRecorder) GetSigner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSigner", reflect.TypeOf((*MockAbstractTransaction)(nil).GetSigner))
}

// GetType mocks base method
func (m *MockAbstractTransaction) GetType() common.TxType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(common.TxType)
	return ret0
}

// GetType indicates an expected call of GetType
func (mr *MockAbstractTransactionMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockAbstractTransaction)(nil).GetType))
}

// Nonce mocks base method
func (m *MockAbstractTransaction) Nonce() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nonce")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Nonce indicates an expected call of Nonce
func (mr *MockAbstractTransactionMockRecorder) Nonce() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nonce", reflect.TypeOf((*MockAbstractTransaction)(nil).Nonce))
}

// Sender mocks base method
func (m *MockAbstractTransaction) Sender(arg0 model.Signer) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sender", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sender indicates an expected call of Sender
func (mr *MockAbstractTransactionMockRecorder) Sender(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sender", reflect.TypeOf((*MockAbstractTransaction)(nil).Sender), arg0)
}

// SenderPublicKey mocks base method
func (m *MockAbstractTransaction) SenderPublicKey(arg0 model.Signer) (*ecdsa.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SenderPublicKey", arg0)
	ret0, _ := ret[0].(*ecdsa.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SenderPublicKey indicates an expected call of SenderPublicKey
func (mr *MockAbstractTransactionMockRecorder) SenderPublicKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SenderPublicKey", reflect.TypeOf((*MockAbstractTransaction)(nil).SenderPublicKey), arg0)
}

// Size mocks base method
func (m *MockAbstractTransaction) Size() common.StorageSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(common.StorageSize)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockAbstractTransactionMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockAbstractTransaction)(nil).Size))
}

// To mocks base method
func (m *MockAbstractTransaction) To() *common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "To")
	ret0, _ := ret[0].(*common.Address)
	return ret0
}

// To indicates an expected call of To
func (mr *MockAbstractTransactionMockRecorder) To() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "To", reflect.TypeOf((*MockAbstractTransaction)(nil).To))
}
